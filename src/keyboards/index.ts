import { Menu } from '@grammyjs/menu';
import { Composer } from 'grammy';
import { Context } from '../core/context';
import getCurrentRow from '../utils/getCurrentRow';
import { getSaldo } from '../utils/sheets';

export const flags = {
  usd: 'üí∞ USD',
  try: 'üáπüá∑ TRY',
  rub: 'üá∑üá∫ RUB',
  rsd: 'üá∑üá∏ RSD',
};

const titles = {
  currency: '–í—ã–±–µ—Ä–∏–µ –≤–∞–ª—é—Ç—É',
  dayPicker: '–ö–æ–≥–¥–∞ –¥–µ–Ω—å–≥–∏ –±—ã–ª–∏ –ø–æ—Ç—Ä–∞—á–µ–Ω—ã',
  main: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
};

const composer = new Composer<Context>();

export const currencyMenu = (() => {
  const menu = new Menu<Context>('currency-menu')
    .text('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', async (ctx) => {
      await ctx.editMessageText(titles.main);
      ctx.menu.back();
    })
    .row();

  const makeCurrencyButton = ([key, value]: [string, string]) => {
    menu.text(value, (ctx) => {
      if (ctx.session.spentData?.isActual) {
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ /menu');
        return;
      }

      ctx.session.spentData = {
        ...ctx.session.spentData,
        isActual: true,
        currency: key,
      };

      const dayText = ctx.session.spentData.isToday
        ? '—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π'
        : '–≤—á–µ—Ä–∞—à–Ω–∏–π';

      ctx.reply(`–ñ–¥—É –≤–∞—à ${dayText} —Ä–∞—Å—Ö–æ–¥ –≤ –≤–∞–ª—é—Ç–µ ${value}`);
    });
  };

  Object.entries(flags).forEach(makeCurrencyButton);

  return menu;
})();

const chooseDay =
  (isToday = true) =>
  async (ctx: Context) => {
    if (ctx.session.spentData?.isActual) {
      ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ /menu –∏–ª–∏ /push'
      );
      return;
    }

    ctx.session.spentData = {
      ...ctx.session.spentData,
      isToday,
    };

    await ctx.editMessageText(titles.currency);
    ctx.menu.nav('currency-menu');
  };

export const dayPickerMenu = new Menu<Context>('day-picker-menu')
  .text('–°–µ–≥–æ–¥–Ω—è', chooseDay(true))
  .text('–í—á–µ—Ä–∞', chooseDay(false))
  .row()
  .text('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', async (ctx) => {
    await ctx.editMessageText(titles.main);
    ctx.menu.back();
  });

export const mainMenu = new Menu<Context>('main-menu')
  .text('–î–æ–±–∞–≤–∏—Ç—å –∑–∞—Ç—Ä–∞—Ç—ã', async (ctx) => {
    await ctx.editMessageText(titles.dayPicker);
    ctx.menu.nav('day-picker-menu');
  })
  .row()
  .text('–£–∑–Ω–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', async (ctx) => {
    const saldo = await getSaldo({ currentRowDate: getCurrentRow() });

    const text = Object.entries(saldo)
      .map(
        ([key, value]) =>
          `${(flags as any)[key].split(' ').reverse().join('')} ${value}`
      )
      .join('\n');

    ctx.reply('–ù–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å' + '```\n' + text + '\n```', {
      parse_mode: 'MarkdownV2',
    });
  });

mainMenu.register(currencyMenu);
mainMenu.register(dayPickerMenu);

composer.use(mainMenu);

export const descMenu = new Menu<Context>('desc-menu')
  .text('–î–∞', (ctx) => {
    ctx.session.spentData = {
      isToday: ctx.session.spentData.isToday,
      waitForDesc: true,
    };
    ctx.reply('–ñ–¥—É –≤–∞—à–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è');
  })
  .text('–ù–µ—Ç', (ctx) =>
    ctx.reply(`–í–µ—Ä–Ω—É–ª –≤–∞—Å –≤ ${titles.main}`, { reply_markup: mainMenu })
  );

composer.use(descMenu);

export default composer;
